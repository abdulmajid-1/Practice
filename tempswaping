
#include <iostream>
using namespace std;

struct Node
{
  int data;
  Node *next = NULL;
  Node(int data) : data(data) {}
};

void print(Node *head)
{
  Node *temp = head;
  while (temp != NULL)
  {
    cout << temp->data << ' ';
    temp = temp->next;
  }
  cout << endl;
}

void swap(Node *&head, int m, int n)
{
  static bool is_head_setted = false;

  Node *temp1Start = head;
  Node *temp1 = head;
  Node *temp2 = head;
  Node *prev = NULL;

  while (temp2)
  {
    int i;
    for (i = 1; i < m && temp1 != NULL; i++)
    {
      temp1 = temp1->next;
      temp2 = temp2->next;
    }
    if (!temp1)
    {
      // if there are not enough elements in the first group, just break it
      break;
    }
    Node *temp2Start = temp2->next;
    if (!is_head_setted && temp2->next)
    {
      head = temp2->next;
      is_head_setted = true;
    }
    for (i = 1; i <= n && temp2->next; i++)
    {
      temp2 = temp2->next;
    }
    // if there are not enough elements in second group, let the swap happen, if we want to swap, just uncomment this code
    /*if (i < n)
    {
      // if there are not enough elements in teh
      break;
    }*/

    Node *connect_to_prev = temp1->next;

    Node *temp2Next = temp2->next;
    temp2->next = temp1Start;
    temp1->next = temp2Next;

    if (prev && connect_to_prev)
    {
      prev->next = connect_to_prev;
    }

    // here we have previous block last element in temp1
    prev = temp1;

    temp1 = temp2Next;
    temp2 = temp2Next;
    temp1Start = temp2Next;
  }

  // not the part of logic, just for other test cases to work
  is_head_setted = false;
}

Node *create_ll(int n)
{
  Node *head = new Node(1);
  Node *tail = head;
  for (int i = 2; i <= n; i++)
  {
    tail->next = new Node(i);
    tail = tail->next;
  }
  return head;
}

int main()
{
  Node *head = create_ll(8);

  print(head);
  swap(head, 2, 2);
  print(head);
  cout << endl;

  Node *head2 = create_ll(10);

  print(head2);
  swap(head2, 3, 2);
  print(head2);
  cout << endl;

  Node *head3 = create_ll(5);
  print(head3);
  swap(head3, 3, 4);
  print(head3);
  cout << endl;

  Node *head4 = create_ll(2);
  print(head4);
  swap(head4, 3, 4);
  print(head4);
  cout << endl;

  return 0;
}